// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package instruments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstrumentClient is the client API for Instrument service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentClient interface {
	GetInstrument(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error)
}

type instrumentClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentClient(cc grpc.ClientConnInterface) InstrumentClient {
	return &instrumentClient{cc}
}

func (c *instrumentClient) GetInstrument(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (*InstrumentResponse, error) {
	out := new(InstrumentResponse)
	err := c.cc.Invoke(ctx, "/instruments.Instrument/GetInstrument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentServer is the server API for Instrument service.
// All implementations must embed UnimplementedInstrumentServer
// for forward compatibility
type InstrumentServer interface {
	GetInstrument(context.Context, *InstrumentRequest) (*InstrumentResponse, error)
	mustEmbedUnimplementedInstrumentServer()
}

// UnimplementedInstrumentServer must be embedded to have forward compatible implementations.
type UnimplementedInstrumentServer struct {
}

func (UnimplementedInstrumentServer) GetInstrument(context.Context, *InstrumentRequest) (*InstrumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstrument not implemented")
}
func (UnimplementedInstrumentServer) mustEmbedUnimplementedInstrumentServer() {}

// UnsafeInstrumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentServer will
// result in compilation errors.
type UnsafeInstrumentServer interface {
	mustEmbedUnimplementedInstrumentServer()
}

func RegisterInstrumentServer(s grpc.ServiceRegistrar, srv InstrumentServer) {
	s.RegisterService(&Instrument_ServiceDesc, srv)
}

func _Instrument_GetInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentServer).GetInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instruments.Instrument/GetInstrument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentServer).GetInstrument(ctx, req.(*InstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Instrument_ServiceDesc is the grpc.ServiceDesc for Instrument service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Instrument_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instruments.Instrument",
	HandlerType: (*InstrumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstrument",
			Handler:    _Instrument_GetInstrument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instruments.proto",
}
